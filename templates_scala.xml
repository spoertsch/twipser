<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="org.scala-ide.sdt.core.templates" deleted="false" description="ExecutionContext definition" enabled="true" name="ec">implicit val ec: ExecutionContext = ExecutionContext.Implicits.global</template><template autoinsert="true" context="org.scala-ide.sdt.core.templates" deleted="false" description="ExecutionContext - Import" enabled="true" name="eci">import scala.concurrent.ExecutionContext.Implicits.global</template><template autoinsert="true" context="org.scala-ide.sdt.core.templates" deleted="false" description="Global - Imports" enabled="true" name="gi">import actors.GenerateDummyTwiip
import actors.MessageActor
import akka.actor.Props
import play.api.GlobalSettings
import play.api.Logger
import play.api.Play.current
import play.api.libs.concurrent.Execution.Implicits.defaultContext
import play.api.libs.concurrent.Akka
import play.api.mvc.WithFilters
import play.filters.gzip.GzipFilter
import scala.concurrent.duration.DurationInt</template><template autoinsert="true" context="org.scala-ide.sdt.core.templates" deleted="false" description="Global - onStart" enabled="true" name="gos">override def onStart(app: play.api.Application) {
    Logger.info("onStart: Init actors")
    val messageActor = Akka.system.actorOf(Props[MessageActor], name = "messageActor")
    Akka.system.scheduler.schedule(30 seconds, 30 seconds, messageActor, GenerateDummyTwiip)
  }</template><template autoinsert="true" context="org.scala-ide.sdt.core.templates" deleted="false" description="TwiipApi - create" enabled="true" name="tac">  implicit val rds = (
    (__ \ 'author).read[String] and
    (__ \ 'message).read[String]) tupled

  def createJson() = Action(parse.json) { implicit request =&gt;
    request.body.validate[(String, String)].map {
      case (author, message) =&gt; {
        val newTwiip = Twiip(author, message)
        Twiip.save(newTwiip)
        TwiipController.pushToFeed(newTwiip)
        Created.withHeaders(
          "Location" -&gt; routes.TwiipApi.findById(newTwiip.id).absoluteURL())
      }
    }.recoverTotal {
      e =&gt; BadRequest("Detected error:" + JsError.toFlatJson(e))
    }
  }</template><template autoinsert="true" context="org.scala-ide.sdt.core.templates" deleted="false" description="TwiipActor - receive" enabled="true" name="tacr">def receive = {
    case GenerateDummyTwiip =&gt; {
      val twiip = Twiip("Dummy", "This is a dummy twiip!")
      Twiip.save(twiip).map { lastError =&gt;
        if (lastError.ok) {
          TwiipController.pushToFeed(twiip)
        } else {
          Logger.error("Error generating dummy twiip: " + lastError)
        }
      }
    }
    case _ =&gt; Logger.error("Invalid twiip")
  }</template><template autoinsert="true" context="org.scala-ide.sdt.core.templates" deleted="false" description="TwiipApi - findAll" enabled="true" name="tafa">  def findAll() = Action.async {
    implicit req =&gt;
      Twiip.findAll.map { twiips =&gt;
        Ok(Json.toJson(twiips)).as(JSON)
      }
  }</template><template autoinsert="true" context="org.scala-ide.sdt.core.templates" deleted="false" description="TwiipApi - findAllByAuthor" enabled="true" name="tafaby">  def findAllByAuthor(author: String) = Action.async {
    implicit req =&gt;
      Twiip.findAll(Some(author)).map { twiips =&gt;
        render {
          case Accepts.Json() =&gt; {
            Ok(Json.toJson(twiips)).as(JSON)
          }
          case Accepts.Xml() =&gt; {
            Ok(&lt;twiips&gt;
                 {
                   twiips.map(t =&gt; mapTwiipToXml(t))
                 }
               &lt;/twiips&gt;).as(XML)
          }
          case _ =&gt; NotAcceptable

        }
      }
  }</template><template autoinsert="true" context="org.scala-ide.sdt.core.templates" deleted="false" description="TwiipApi - findById" enabled="true" name="tafid">  def findById(id: String) = Action.async {
    implicit req =&gt;
      Twiip.findById(id).map(twiip =&gt;
        twiip match {
          case Some(twiip) =&gt; {
            render {
              case Accepts.Json() =&gt; {
                Ok(Json.toJson(twiip)).as(JSON)
              }
              case Accepts.Xml() =&gt; {
                Ok(mapTwiipToXml(twiip)).as(XML)
              }
              case _ =&gt; NotAcceptable
            }
          }
          case _ =&gt; NotFound
        })
  }</template><template autoinsert="true" context="org.scala-ide.sdt.core.templates" deleted="false" description="TwiipApi - findNLatest" enabled="true" name="tafn">  def findNLatest(n: Int) = Action.async {
    implicit req =&gt;
      Twiip.findNLatest(n).map { twiips =&gt;
        render {
          case Accepts.Json() =&gt; {
            Ok(Json.toJson(twiips)).as(JSON)
          }
          case Accepts.Xml() =&gt; {
            Ok(&lt;twiips&gt;
                 {
                   twiips.map(t =&gt; mapTwiipToXml(t))
                 }
               &lt;/twiips&gt;).as(XML)
          }
          case _ =&gt; NotAcceptable

        }
      }
  }</template><template autoinsert="true" context="org.scala-ide.sdt.core.templates" deleted="false" description="TwiipApi - Imports" enabled="true" name="tai">import scala.concurrent.ExecutionContext.Implicits.global

import controllers.TwiipController
import model.Twiip
import play.api.libs.functional.syntax.functionalCanBuildApplicative
import play.api.libs.functional.syntax.toFunctionalBuilderOps
import play.api.libs.json.JsError
import play.api.libs.json.Json
import play.api.libs.json.__
import play.api.mvc.Action
import play.api.mvc.Controller
import model.TwiipImplicits._</template><template autoinsert="true" context="org.scala-ide.sdt.core.templates" deleted="false" description="TwiipApi - mapTwiipToXmp" enabled="true" name="taxml">  def mapTwiipToXml(twiip: Twiip) = {
    &lt;twiip&gt;
      &lt;author&gt;{ twiip.author }&lt;/author&gt;
      &lt;text&gt;{ twiip.message }&lt;/text&gt;
      &lt;createdAt&gt;{ twiip.createdAtISO }&lt;/createdAt&gt;
    &lt;/twiip&gt;
  }</template><template autoinsert="true" context="org.scala-ide.sdt.core.templates" deleted="false" description="TwiipController - create" enabled="true" name="tcc">  def create = Action.async {
    implicit request =&gt;
      twiipForm.bindFromRequest.fold(
        errors =&gt; {
          Twiip.findAll.map {
            twiips =&gt; BadRequest(views.html.twiips(errors, twiips))
          }
        },
        twiip =&gt; {
          val newTwiip = Twiip(twiip._1, twiip._2)
          Twiip.save(newTwiip).map(lastError =&gt; {
            if (lastError.ok) {
              Redirect(routes.TwiipController.createForm())
            } else {
              InternalServerError(lastError.message)
            }
          })

        })
  }</template><template autoinsert="true" context="org.scala-ide.sdt.core.templates" deleted="false" description="TwiipController - createForm" enabled="true" name="tccf">def createForm = Action.async {
    implicit request =&gt;
      Twiip.findAll.map {
        twiips =&gt; Ok(views.html.twiips(twiipForm, twiips))
      }
  }</template><template autoinsert="true" context="org.scala-ide.sdt.core.templates" deleted="false" description="TwiipController - twiipForm" enabled="true" name="tcf">val twiipForm = Form(
    tuple(
      "author" -&gt; nonEmptyText(minLength = 3),
      "message" -&gt; nonEmptyText(minLength = 1, maxLength = 120)))</template><template autoinsert="true" context="org.scala-ide.sdt.core.templates" deleted="false" description="TwiipController - WebSocket feed" enabled="true" name="tcws">  val (broadcast, channel) = Concurrent.broadcast[JsValue]

  def pushToFeed(twiip: Twiip) = {
    channel.push(Json.toJson(twiip))
  }

  def feed = WebSocket.using[JsValue] { req =&gt;
    (Iteratee.foreach { json =&gt;
      Unit
    }, broadcast)
  }</template><template autoinsert="true" context="org.scala-ide.sdt.core.templates" deleted="false" description="TwiipController - WebSocket bidirectional" enabled="true" name="tcws2">  def feed = WebSocket.using[JsValue] { req =&gt;
    (Iteratee.foreach { json =&gt;
      val form = twiipForm.bind(json)
      if (!form.hasErrors) {
        val newTwiip = Twiip(form.get._1, form.get._2)
        Twiip.save(newTwiip)
        channel.push(Json.toJson(newTwiip))
      }
    }, broadcast)
  }</template><template autoinsert="true" context="org.scala-ide.sdt.core.templates" deleted="false" description="Twiip - MongoDB definition" enabled="true" name="tdb">  def db = ReactiveMongoPlugin.db
  def collection = db.collection[BSONCollection]("Twiips")</template><template autoinsert="true" context="org.scala-ide.sdt.core.templates" deleted="false" description="Twiip - findAll version 1" enabled="true" name="tfa">  def findAll = {
    collection.find(BSONDocument()).sort(BSONDocument("created_at" -&gt; -1)).options(QueryOpts().batchSize(10)).cursor[Message].collect[List]() 
  }</template><template autoinsert="true" context="org.scala-ide.sdt.core.templates" deleted="false" description="Twiip - findAll version 2" enabled="true" name="tfa2">  def findAll: Future[List[Twiip]] = findAll(None)

  def findAll(author: Option[String]) = {
    val query = author match {
      case Some(author) =&gt; BSONDocument("author" -&gt; author)
      case _ =&gt; BSONDocument()
    }
    collection.find(query).sort(BSONDocument("created_at" -&gt; -1)).options(QueryOpts().batchSize(10)).cursor[Twiip].collect[List]()
  }</template><template autoinsert="true" context="org.scala-ide.sdt.core.templates" deleted="false" description="Twiip - findById" enabled="true" name="tfid">  def findById(id: String): Future[Option[Twiip]] = {
    collection.find(BSONDocument("_id" -&gt; BSONObjectID(id))).one[Twiip]
  }</template><template autoinsert="true" context="org.scala-ide.sdt.core.templates" deleted="false" description="Twiip - findNLatest" enabled="true" name="tfn">  def findNLatest(n: Int): Future[List[Twiip]] = {
    collection.find(BSONDocument()).sort(BSONDocument("created_at" -&gt; -1)).options(QueryOpts().batchSize(n)).cursor[Twiip].collect[List](n)
  }</template><template autoinsert="true" context="org.scala-ide.sdt.core.templates" deleted="false" description="Twiip - createdAtISO" enabled="true" name="tiso">  /**
   * Converts createdAt to printable date time.
   */
  def createdAtISO(): String = ISODateTimeFormat.dateTimeNoMillis().print(createdAt)</template><template autoinsert="true" context="org.scala-ide.sdt.core.templates" deleted="false" description="Twiip - save" enabled="true" name="ts">  def save(twiit: Twiip) = {
    collection.insert(twiit)
  }</template></templates>